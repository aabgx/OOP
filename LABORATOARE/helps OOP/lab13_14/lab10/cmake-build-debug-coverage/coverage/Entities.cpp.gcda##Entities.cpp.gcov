        -:    0:Source:/mnt/c/Users/Laura/CLionProjects/lab_8-9/Entities.cpp
        -:    0:Graph:/mnt/c/Users/Laura/CLionProjects/lab_8-9/cmake-build-debug-coverage/CMakeFiles/untitled.dir/Entities.cpp.gcno
        -:    0:Data:/mnt/c/Users/Laura/CLionProjects/lab_8-9/cmake-build-debug-coverage/CMakeFiles/untitled.dir/Entities.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Laura on 4/8/2022.
        -:    3://
        -:    4:
        -:    5:#include "Entities.h"
        -:    6:#include <assert.h>
        -:    7:
        -:    8:
function _ZNK6Produs7getNumeB5cxx11Ev called 248 returned 100% blocks executed 100%
      248:    9:string Produs::getNume() const {
      248:   10:    return this->nume;
      248:   10-block  0
call    0 returned 248
        -:   11:}
function _ZNK6Produs6getTipB5cxx11Ev called 56 returned 100% blocks executed 100%
       56:   12:string Produs::getTip() const {
       56:   13:    return this->tip;
       56:   13-block  0
call    0 returned 56
        -:   14:}
function _ZNK6Produs7getProdB5cxx11Ev called 97 returned 100% blocks executed 100%
       97:   15:string Produs::getProd() const {
       97:   16:    return this->producator;
       97:   16-block  0
call    0 returned 97
        -:   17:}
function _ZNK6Produs7getPretEv called 74 returned 100% blocks executed 100%
       74:   18:double Produs::getPret() const noexcept {
       74:   19:    return this->pret;
       74:   19-block  0
        -:   20:}
function _ZN6Produs7setPretEd called 3 returned 100% blocks executed 100%
        3:   21:void Produs::setPret(double pretnou) noexcept {
        3:   22:    this->pret = pretnou;
        3:   23:}
        -:   24:
function _Z7cmpnumeR6ProdusS0_ called 25 returned 100% blocks executed 80%
       25:   25:bool cmpnume(Produs& p1,  Produs& p2) {
       25:   26:    return p1.getNume() < p2.getNume();
       25:   26-block  0
call    0 returned 25
call    1 returned 25
branch  2 taken 25 (fallthrough)
branch  3 taken 0 (throw)
       25:   26-block  1
call    4 returned 25
call    5 returned 25
call    6 returned 25
       25:   26-block  2
    $$$$$:   26-block  3
call    7 never executed
        -:   27:}
        -:   28:
function _Z7cmppretR6ProdusS0_ called 17 returned 100% blocks executed 100%
       17:   29:bool cmppret(Produs& p1,  Produs& p2) noexcept {
       17:   30:    return p1.getPret() < p2.getPret();
       17:   30-block  0
call    0 returned 17
call    1 returned 17
        -:   31:}
        -:   32:
function _Z6cmptipR6ProdusS0_ called 1 returned 100% blocks executed 80%
        1:   33:bool cmptip(Produs& p1,  Produs& p2) {
        1:   34:    return p1.getTip() < p2.getTip();
        1:   34-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   34-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
        1:   34-block  2
    $$$$$:   34-block  3
call    7 never executed
        -:   35:}
        -:   36:
function _Z10cmpNumeTipR6ProdusS0_ called 14 returned 100% blocks executed 71%
       14:   37:bool cmpNumeTip(  Produs& m1,  Produs& m2) {
       14:   38:    if (m1.getNume() == m2.getNume())
       14:   38-block  0
call    0 returned 14
call    1 returned 14
branch  2 taken 14 (fallthrough)
branch  3 taken 0 (throw)
       14:   38-block  1
call    4 returned 14
call    5 returned 14
call    6 returned 14
branch  7 taken 2 (fallthrough)
branch  8 taken 12
    $$$$$:   38-block  2
call    9 never executed
    $$$$$:   38-block  3
call   10 never executed
        2:   39:        return m1.getTip() < m2.getTip();
        2:   39-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   39-block  1
call    4 returned 2
call    5 returned 2
call    6 returned 2
    $$$$$:   39-block  2
call    7 never executed
    $$$$$:   39-block  3
call    8 never executed
        -:   40:    else
       12:   41:        return m1.getNume() < m2.getNume();
       12:   41-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12:   41-block  1
call    4 returned 12
call    5 returned 12
call    6 returned 12
    $$$$$:   41-block  2
call    7 never executed
        -:   42:}
        -:   43:
function _Z8testeEntv called 1 returned 100% blocks executed 57%
        1:   44:void testeEnt()
        -:   45:{
        3:   46:    Produs prod1{ "aaa","bbb","ccc",38.5 };
        1:   46-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   46-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   46-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   46-block  3
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
        1:   46-block  4
call   20 returned 1
    $$$$$:   46-block  5
    $$$$$:   46-block  6
    $$$$$:   46-block  7
    $$$$$:   46-block  8
    $$$$$:   46-block  9
    $$$$$:   46-block 10
    $$$$$:   46-block 11
call   21 never executed
       1*:   47:    assert(prod1.getNume() == "aaa");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   47-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   47-block  1
call    6 never executed
        1:   47-block  2
call    7 returned 1
       1*:   48:    assert(prod1.getTip() == "bbb");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   48-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   48-block  1
call    6 never executed
        1:   48-block  2
call    7 returned 1
       1*:   49:    assert(prod1.getProd() == "ccc");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   49-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   49-block  1
call    6 never executed
        1:   49-block  2
call    7 returned 1
       1*:   50:    assert(prod1.getPret() == 38.5);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   50-block  0
call    3 never executed
        -:   51:
        1:   52:    prod1.setPret(40);
        1:   52-block  0
call    0 returned 1
       1*:   53:    assert(prod1.getPret() == 40);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   53-block  0
call    3 never executed
        1:   54:}
        -:   55:
function _Z8testecmpv called 1 returned 100% blocks executed 45%
        1:   56:void testecmp()
        -:   57:{
        3:   58:    Produs prod1{ "aaa","bbb","ccc",38.5 };
        1:   58-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   58-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   58-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   58-block  3
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
    $$$$$:   58-block  4
    $$$$$:   58-block  5
    $$$$$:   58-block  6
    $$$$$:   58-block  7
    $$$$$:   58-block  8
    $$$$$:   58-block  9
    $$$$$:   58-block 10
call   21 never executed
        3:   59:    Produs prod2{ "acr","ngv","gfg",56 };
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   59-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   59-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   59-block  2
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
    $$$$$:   59-block  3
    $$$$$:   59-block  4
    $$$$$:   59-block  5
    $$$$$:   59-block  6
    $$$$$:   59-block  7
    $$$$$:   59-block  8
    $$$$$:   59-block  9
call   21 never executed
        3:   60:    Produs prod3{"aaa","vfc","hgsa",53.5};
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   60-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   60-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   60-block  2
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
        1:   60-block  3
call   20 returned 1
    $$$$$:   60-block  4
    $$$$$:   60-block  5
    $$$$$:   60-block  6
    $$$$$:   60-block  7
    $$$$$:   60-block  8
    $$$$$:   60-block  9
    $$$$$:   60-block 10
call   21 never executed
        1:   61:    const int  var1 = cmpnume(prod1, prod2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   62:    assert(var1== 1);
        1:   62-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   62-block  1
call    2 never executed
        1:   63:    const int var2 = cmppret(prod1, prod2);
        1:   63-block  0
call    0 returned 1
       1*:   64:    assert( var2== 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   64-block  0
call    2 never executed
        1:   65:    const int var3 = cmptip(prod1, prod2);
        1:   65-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   66:    assert(var3 == 1);
        1:   66-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   66-block  1
call    2 never executed
        1:   67:    const int var4= cmpNumeTip(prod1,prod3);
        1:   67-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   68:    assert(var4==1);
        1:   68-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   68-block  1
call    2 never executed
        1:   69:    const int var5= cmpNumeTip(prod1,prod2);
        1:   69-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   70:    assert(var5==1);
        1:   70-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   70-block  1
call    2 never executed
        -:   71:
        1:   72:}
